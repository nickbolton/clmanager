<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                                   "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
 <class name="net.deuce.clmanager.domain.Post" table="POST">
  <id type="long" column="POST_ID" name="id">
   <generator class="native"/>
  </id>
  <property column="TITLE" generated="never" lazy="false" name="title" type="string"/>
  <property column="CL_ID" unique="true" index="post_clid_idx" generated="never" lazy="false" name="clId" type="long"/>
  <property column="AGE" generated="never" lazy="false" name="age" type="string"/>
  <property column="CONTENT" generated="never" lazy="false" name="content" type="text"/>
  <property column="LOCATION" generated="never" lazy="false" name="location" type="string"/>
  <property column="REPLY_ADDRESS" generated="never" lazy="false" name="replyAddress" type="string"/>
  <property column="DATE" generated="never" lazy="false" name="date" type="date"/>
  <property column="FLAGGED" generated="never" lazy="false" name="flagged" type="boolean"/>
  <property column="PIC" generated="never" lazy="false" name="pic" type="boolean"/>
  <property column="FETCHED" generated="never" lazy="false" name="fetched" type="boolean"/>
  <property column="SPAM" generated="never" lazy="false" index="post_spam_idx" name="spam" type="boolean"/>
  <many-to-one name="city" column="CITY_ID" class="net.deuce.clmanager.domain.City"/>
  <many-to-one name="category" column="CATEGORY_ID" class="net.deuce.clmanager.domain.Category"/>
  <set inverse="true" lazy="true" name="images" order-by="URL ASC">
   <key column="POST_ID"  on-delete="cascade"/>
   <one-to-many class="net.deuce.clmanager.domain.Image"/>
  </set>
 </class>
 <query name="Post.findUniqueByClId">
  <![CDATA[select p from net.deuce.clmanager.domain.Post p where p.clId  = ? ]]>
 </query>
 <!--query name="Post.findByCityAndCategory">
  <![CDATA[select p from net.deuce.clmanager.domain.Post as p left join net.deuce.clmanager.domain.PostActivities as pa where p.spam = 0 and (p.flagged = 0 or (pa.post = p and pa.username = ? and pa.viewed = 1)) and p.city = ? and p.category = ? order by p.clId desc]]>
 </query>
 <query name="Post.findByCity">
  <![CDATA[select p from net.deuce.clmanager.domain.Post as p left join net.deuce.clmanager.domain.PostActivities as pa where p.spam = 0 and (p.flagged = 0 or (pa.post = p and pa.username = ? and pa.viewed = 1)) and p.city = ? order by p.clId desc]]>
 </query>
 <query name="Post.findAllWithSubscribedCity">
  <![CDATA[select p from net.deuce.clmanager.domain.Post as p left join net.deuce.clmanager.domain.PostActivities as pa, net.deuce.clmanager.domain.City c, net.deuce.clmanager.domain.CitySubscription cs, net.deuce.clmanager.domain.UserPreferences up where p.spam = 0 and (p.flagged = 0 or (pa.post = p and pa.username = ? and pa.viewed = 1)) and p.city = c and cs.city = c and cs.userPreferences = up and up.username = ? and cs.subscribed = 1 order by p.clId desc]]>
 </query>
 <query name="Post.findNewerByCity">
  <![CDATA[select p from net.deuce.clmanager.domain.Post as p left join net.deuce.clmanager.domain.PostActivities as pa where p.spam = 0  and (p.flagged = 0 or (pa.post = p and pa.username = ? and pa.viewed = 1)) and p.city = ? and p.clId > ? order by p.clId desc]]>
 </query>
 <query name="Post.findNewerByCityAndCategory">
  <![CDATA[select p from net.deuce.clmanager.domain.Post as p left join net.deuce.clmanager.domain.PostActivities as pa where p.spam = 0  and (p.flagged = 0 or (pa.post = p and pa.username = ? and pa.viewed = 1)) and p.city = ? and p.category = ? and p.clId > ? order by p.clId desc]]>
 </query-->
</hibernate-mapping>
